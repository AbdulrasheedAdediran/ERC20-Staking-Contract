/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  StakingContract,
  StakingContractInterface,
} from "../StakingContract";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "addressStakesToIndex",
    outputs: [
      {
        internalType: "uint256",
        name: "stakeTime",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "stakedBalance",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "stakeMaturity",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "stakeProfit",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "stake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052600160005560b4600155600a6002557340a42baf86fc821f972ad2ac878729063ceef403600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073bc4ca0eda7647a8ab7c2061c2e118a18a936f13d600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034801561018f57600080fd5b5061090e8061019f6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063a694fc3a1461003b578063cafc748814610057575b600080fd5b61005560048036038101906100509190610512565b61008a565b005b610071600480360381019061006c91906104d6565b61044d565b6040516100819493929190610632565b60405180910390f35b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016100e791906105d7565b60206040518083038186803b1580156100ff57600080fd5b505afa158015610113573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610137919061053b565b11610177576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161016e90610612565b60405180910390fd5b80600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016101d391906105d7565b60206040518083038186803b1580156101eb57600080fd5b505afa1580156101ff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610223919061053b565b1015610264576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025b906105f2565b60405180910390fd5b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008054815260200190815260200160002090504281600101819055508060000182908060018154018082558091505060019003906000526020600020016000909190919091505560005b81600001805490508110156103735781600001818154811061033b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001548260020160008282546103599190610688565b92505081905550808061036b906107b1565b9150506102f0565b5060015481600101546103869190610688565b816001015414156103af5760018160030160006101000a81548160ff0219169083151502179055505b8060030160009054906101000a900460ff161561040c57600254606482600201546103da91906106de565b6103e4919061070f565b816004018190555080600401548160020160008282546104049190610688565b925050819055505b60008081548092919061041e906107b1565b919050555042816001018190555060008160030160006101000a81548160ff0219169083151502179055505050565b6007602052816000526040600020602052806000526040600020600091509150508060010154908060020154908060030160009054906101000a900460ff16908060040154905084565b6000813590506104a6816108aa565b92915050565b6000813590506104bb816108c1565b92915050565b6000815190506104d0816108c1565b92915050565b600080604083850312156104e957600080fd5b60006104f785828601610497565b9250506020610508858286016104ac565b9150509250929050565b60006020828403121561052457600080fd5b6000610532848285016104ac565b91505092915050565b60006020828403121561054d57600080fd5b600061055b848285016104c1565b91505092915050565b61056d81610769565b82525050565b61057c8161077b565b82525050565b600061058f601683610677565b915061059a82610858565b602082019050919050565b60006105b2601f83610677565b91506105bd82610881565b602082019050919050565b6105d1816107a7565b82525050565b60006020820190506105ec6000830184610564565b92915050565b6000602082019050818103600083015261060b81610582565b9050919050565b6000602082019050818103600083015261062b816105a5565b9050919050565b600060808201905061064760008301876105c8565b61065460208301866105c8565b6106616040830185610573565b61066e60608301846105c8565b95945050505050565b600082825260208201905092915050565b6000610693826107a7565b915061069e836107a7565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156106d3576106d26107fa565b5b828201905092915050565b60006106e9826107a7565b91506106f4836107a7565b92508261070457610703610829565b5b828204905092915050565b600061071a826107a7565b9150610725836107a7565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561075e5761075d6107fa565b5b828202905092915050565b600061077482610787565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006107bc826107a7565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156107ef576107ee6107fa565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f416d6f756e7420657863656564732062616c616e636500000000000000000000600082015250565b7f4d757374206f776e20426f72656420417065204e465420746f207374616b6500600082015250565b6108b381610769565b81146108be57600080fd5b50565b6108ca816107a7565b81146108d557600080fd5b5056fea2646970667358221220c346e13b0eea4aa909421052497d06e8a1d74dfb2e82ad0fd5bc2b2b472edb2064736f6c63430008040033";

export class StakingContract__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<StakingContract> {
    return super.deploy(overrides || {}) as Promise<StakingContract>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): StakingContract {
    return super.attach(address) as StakingContract;
  }
  connect(signer: Signer): StakingContract__factory {
    return super.connect(signer) as StakingContract__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakingContractInterface {
    return new utils.Interface(_abi) as StakingContractInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StakingContract {
    return new Contract(address, _abi, signerOrProvider) as StakingContract;
  }
}
