/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  StakingContract,
  StakingContractInterface,
} from "../StakingContract";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "tokenTransfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "stake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "stakes",
    outputs: [
      {
        internalType: "uint248",
        name: "stakeTime",
        type: "uint248",
      },
      {
        internalType: "bool",
        name: "stakeMaturity",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "stakeBalance",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "viewStakeBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "_balance",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405273b2b580ce436e6f77a5713d80887e14788ef49c9a6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073bc4ca0eda7647a8ab7c2061c2e118a18a936f13d600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060016002553480156100be57600080fd5b506110fa806100ce6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806316934fc4146100515780632e1a7d4d14610083578063a694fc3a146100b3578063e0af8a02146100cf575b600080fd5b61006b60048036038101906100669190610a92565b6100ed565b60405161007a93929190610cd1565b60405180910390f35b61009d60048036038101906100989190610ae4565b61014f565b6040516100aa9190610c56565b60405180910390f35b6100cd60048036038101906100c89190610ae4565b6103ee565b005b6100d76107d9565b6040516100e49190610d08565b60405180910390f35b60036020528060005260406000206000915090508060000160009054906101000a90047effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff169080600001601f9054906101000a900460ff16908060010154905083565b600080600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600061019d610860565b90506001151582600001601f9054906101000a900460ff161515146101f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ee90610c71565b60405180910390fd5b6402540be400816102089190610ddf565b82600101600082825461021b9190610d89565b925050819055508382600101541015610269576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026090610cb1565b60405180910390fd5b8382600101600082825461027d9190610e6a565b9250508190555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33866040518363ffffffff1660e01b81526004016102df929190610c2d565b602060405180830381600087803b1580156102f957600080fd5b505af115801561030d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103319190610abb565b50600192507f15eaef6b52cca0422fcfd03599b7a19d583624be50c7516f29664df698613aad30338660405161036993929190610bf6565b60405180910390a1428260000160006101000a8154817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff02191690837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff160217905550600082600001601f6101000a81548160ff0219169083151502179055505050919050565b60018060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040161044a9190610bdb565b60206040518083038186803b15801561046257600080fd5b505afa158015610476573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049a9190610b0d565b10156104db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d290610c91565b60405180910390fd5b8060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016105359190610bdb565b60206040518083038186803b15801561054d57600080fd5b505afa158015610561573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105859190610b0d565b10156105c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105bd90610cb1565b60405180910390fd5b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b815260040161066693929190610bf6565b602060405180830381600087803b15801561068057600080fd5b505af1158015610694573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b89190610abb565b5060006106c3610860565b90506402540be400816106d69190610ddf565b8260010160008282546106e99190610d89565b92505081905550828260010160008282546107049190610d89565b925050819055507f15eaef6b52cca0422fcfd03599b7a19d583624be50c7516f29664df698613aad33308560405161073e93929190610bf6565b60405180910390a16002600081548092919061075990610f11565b9190505550428260000160006101000a8154817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff02191690837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff160217905550600082600001601f6101000a81548160ff021916908315150217905550505050565b600080600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000610827610860565b90506402540be4008161083a9190610ddf565b82600101600082825461084d9190610d89565b9250508190555081600101549250505090565b600080600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160000160009054906101000a90047effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff16118015610960575060b48160000160009054906101000a90047effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1661093b9190610d34565b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff164210155b1561098357600181600001601f6101000a81548160ff0219169083151502179055505b80600001601f9054906101000a900460ff1615610a3a5760008160000160009054906101000a90047effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff16426109f89190610e6a565b90506000600182610a099190610ddf565b9050617530816402540be400600a610a219190610e10565b610a2b9190610e10565b610a359190610ddf565b935050505b5090565b600081359050610a4d8161107f565b92915050565b600081519050610a6281611096565b92915050565b600081359050610a77816110ad565b92915050565b600081519050610a8c816110ad565b92915050565b600060208284031215610aa457600080fd5b6000610ab284828501610a3e565b91505092915050565b600060208284031215610acd57600080fd5b6000610adb84828501610a53565b91505092915050565b600060208284031215610af657600080fd5b6000610b0484828501610a68565b91505092915050565b600060208284031215610b1f57600080fd5b6000610b2d84828501610a7d565b91505092915050565b610b3f81610e9e565b82525050565b610b4e81610eb0565b82525050565b6000610b61602283610d23565b9150610b6c82610fb8565b604082019050919050565b6000610b84602a83610d23565b9150610b8f82611007565b604082019050919050565b6000610ba7601a83610d23565b9150610bb282611056565b602082019050919050565b610bc681610edc565b82525050565b610bd581610f07565b82525050565b6000602082019050610bf06000830184610b36565b92915050565b6000606082019050610c0b6000830186610b36565b610c186020830185610b36565b610c256040830184610bcc565b949350505050565b6000604082019050610c426000830185610b36565b610c4f6020830184610bcc565b9392505050565b6000602082019050610c6b6000830184610b45565b92915050565b60006020820190508181036000830152610c8a81610b54565b9050919050565b60006020820190508181036000830152610caa81610b77565b9050919050565b60006020820190508181036000830152610cca81610b9a565b9050919050565b6000606082019050610ce66000830186610bbd565b610cf36020830185610b45565b610d006040830184610bcc565b949350505050565b6000602082019050610d1d6000830184610bcc565b92915050565b600082825260208201905092915050565b6000610d3f82610edc565b9150610d4a83610edc565b9250827effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d7e57610d7d610f5a565b5b828201905092915050565b6000610d9482610f07565b9150610d9f83610f07565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610dd457610dd3610f5a565b5b828201905092915050565b6000610dea82610f07565b9150610df583610f07565b925082610e0557610e04610f89565b5b828204905092915050565b6000610e1b82610f07565b9150610e2683610f07565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e5f57610e5e610f5a565b5b828202905092915050565b6000610e7582610f07565b9150610e8083610f07565b925082821015610e9357610e92610f5a565b5b828203905092915050565b6000610ea982610ebc565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60007effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610f1c82610f07565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610f4f57610f4e610f5a565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f5374616b65206973206e6f74206d617475726520666f7220776974686472617760008201527f616c000000000000000000000000000000000000000000000000000000000000602082015250565b7f536f7272792c206f6e6c7920426f72656420417065204e4654206f776e65727360008201527f2063616e207374616b6500000000000000000000000000000000000000000000602082015250565b7f416d6f756e742065786365656473204241542062616c616e6365000000000000600082015250565b61108881610e9e565b811461109357600080fd5b50565b61109f81610eb0565b81146110aa57600080fd5b50565b6110b681610f07565b81146110c157600080fd5b5056fea2646970667358221220567ce00f71fb9901ef6f8aa81e2db466db4328db2881dd52526050ba69da11c664736f6c63430008040033";

export class StakingContract__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<StakingContract> {
    return super.deploy(overrides || {}) as Promise<StakingContract>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): StakingContract {
    return super.attach(address) as StakingContract;
  }
  connect(signer: Signer): StakingContract__factory {
    return super.connect(signer) as StakingContract__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakingContractInterface {
    return new utils.Interface(_abi) as StakingContractInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StakingContract {
    return new Contract(address, _abi, signerOrProvider) as StakingContract;
  }
}
